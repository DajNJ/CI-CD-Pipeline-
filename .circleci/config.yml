version: 2.1

jobs:
  build:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Log in to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin

      - run:
          name: Build Docker image
          command: |
            docker build -t $DOCKERHUB_USER/demo-app .

      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Run Container for Testing
          command: |
            docker run -d -p 80:3000 --name test-app $DOCKERHUB_USER/demo-app
            sleep 10
            CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' test-app)
            curl --fail http://$CONTAINER_IP:3000/health || (docker logs test-app && exit 1)

      - run:
          name: Clean Up Container
          command: |
            docker stop test-app && docker rm test-app

  deploy:
    docker:
      - image: cimg/python:3.9
    steps:
      - attach_workspace:
          at: .

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Install AWS CLI
          command: |
            pip install awscli

      - run:
          name: Log in to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin

      - run:
          name: Push Docker Image
          command: |
            docker push $DOCKERHUB_USER/demo-app

      - add_ssh_keys:
          fingerprints:
            - "$SSH_KEY_FINGERPRINT"

      - run:
          name: Setup SSH
          command: |
            mkdir -p ~/.ssh
            cat > ~/.ssh/config \<< EOF
            Host $EC2_HOST
              HostName $EC2_HOST
              User ec2-user
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
              ConnectTimeout 30
              ServerAliveInterval 60
              ServerAliveCountMax 3
              TCPKeepAlive yes
            EOF
            chmod 600 ~/.ssh/config

      - run:
          name: Test SSH Connectivity
          command: |
            echo "Testing SSH connection to $EC2_HOST..."
            for i in {1..3}; do
              echo "Attempt $i/3"
              if ssh -v ec2-user@$EC2_HOST 'echo "SSH connection successful"'; then
                echo "✅ SSH connection established"
                exit 0
              fi
              sleep 5
            done
            echo "❌ SSH connection failed after 3 attempts"

      - run:
          name: Deploy to EC2
          command: |
            echo "Starting deployment to $EC2_HOST..."
            
            # Create deployment script
            cat > deploy.sh \\<< 'SCRIPT'
            #!/bin/bash
            set -e
            
            echo "=== Installing Docker ==="
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start || sudo systemctl start docker
              sudo chkconfig docker on || sudo systemctl enable docker
              sudo usermod -a -G docker ec2-user
            fi
            
            echo "=== Starting Docker service ==="
            sudo service docker start || sudo systemctl start docker
            
            echo "=== Pulling image ==="
            sudo docker pull DOCKERHUB_USER_PLACEHOLDER/demo-app
            
            echo "=== Stopping existing container ==="
            sudo docker stop demo-app 2>/dev/null || echo "No existing container"
            sudo docker rm demo-app 2>/dev/null || echo "No container to remove"
            
            echo "=== Starting new container ==="
            sudo docker run -d -p 80:3000 --name demo-app DOCKERHUB_USER_PLACEHOLDER/demo-app
            
            echo "=== Verifying deployment ==="
            sleep 10
            sudo docker ps
            sudo docker logs demo-app
            curl -f http://localhost:80/health || echo "Health check failed"
            SCRIPT
            
            # Replace placeholder with actual username
            sed -i "s/DOCKERHUB_USER_PLACEHOLDER/$DOCKERHUB_USER/g" deploy.sh
            
            # Copy and execute script on EC2
            if scp deploy.sh ec2-user@$EC2_HOST:~/deploy.sh && \
               ssh ec2-user@$EC2_HOST 'chmod +x ~/deploy.sh && ~/deploy.sh'; then
              echo "✅ Deployment completed successfully"
            else
              echo "❌ Deployment failed"
              echo "Check CircleCI logs and EC2 instance manually"
            fi

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test

version: 2.1

jobs:
  build:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Log in to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin

      - run:
          name: Build Docker image
          command: |
            docker build -t $DOCKERHUB_USER/demo-app .

      - persist_to_workspace:
          root: .
          paths:
            - .

  test:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: .

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Run Container for Testing
          command: |
            docker run -d -p 80:3000 --name test-app $DOCKERHUB_USER/demo-app
            sleep 10
            CONTAINER_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' test-app)
            curl --fail http://$CONTAINER_IP:3000/health || (docker logs test-app && exit 1)

      - run:
          name: Clean Up Container
          command: |
            docker stop test-app && docker rm test-app

  deploy:
    docker:
      - image: cimg/python:3.9
    steps:
      - attach_workspace:
          at: .

      - setup_remote_docker:
          docker_layer_caching: true

      - run:
          name: Install AWS CLI
          command: |
            pip install awscli

      - run:
          name: Log in to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin

      - run:
          name: Push Docker Image
          command: |
            docker push $DOCKERHUB_USER/demo-app

      - add_ssh_keys:
          fingerprints:
            - "$SSH_KEY_FINGERPRINT"

      - run:
          name: Setup SSH
          command: |
            mkdir -p ~/.ssh
            cat > ~/.ssh/config \<< EOF
            Host $EC2_HOST
              HostName $EC2_HOST
              User ec2-user
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
              ConnectTimeout 30
              ServerAliveInterval 60
              ServerAliveCountMax 3
              TCPKeepAlive yes
            EOF
            chmod 600 ~/.ssh/config

      - run:
          name: Test SSH Connectivity
          command: |
            echo "Testing SSH connection to $EC2_HOST..."
            for i in {1..3}; do
              echo "Attempt $i/3"
              if ssh -v ec2-user@$EC2_HOST 'echo "SSH connection successful"'; then
                echo "✅ SSH connection established"
                exit 0
              fi
              sleep 5
            done
            echo "❌ SSH connection failed after 3 attempts"

      - run:
          name: Deploy to EC2
          command: |
            echo "Attempting SSH deployment to $EC2_HOST..."
            
            # Test basic SSH connectivity first
            if ! ssh -o ConnectTimeout=10 ec2-user@$EC2_HOST 'echo "SSH test successful"'; then
              echo "❌ SSH connection failed - cannot deploy"
              echo "Manual deployment required:"
              echo "1. SSH to your EC2: ssh ec2-user@$EC2_HOST"
              echo "2. Run: sudo yum install -y docker && sudo service docker start"
              echo "3. Run: sudo docker pull $DOCKERHUB_USER/demo-app"
              echo "4. Run: sudo docker run -d -p 80:3000 --name demo-app $DOCKERHUB_USER/demo-app"
              exit 1
            fi
            
            # Execute deployment commands
            ssh -o ConnectTimeout=30 ec2-user@$EC2_HOST '
              set -e
              echo "=== Installing Docker ==="
              if ! command -v docker &> /dev/null; then
                sudo yum update -y
                sudo yum install -y docker
                sudo service docker start
                sudo chkconfig docker on
                sudo usermod -a -G docker ec2-user
              fi
              
              echo "=== Starting Docker ==="
              sudo service docker start
              
              echo "=== Pulling image ==="
              sudo docker pull '$DOCKERHUB_USER'/demo-app
              
              echo "=== Deploying container ==="
              sudo docker stop demo-app 2>/dev/null || true
              sudo docker rm demo-app 2>/dev/null || true
              sudo docker run -d -p 80:3000 --name demo-app '$DOCKERHUB_USER'/demo-app
              
              echo "=== Verification ==="
              sudo docker ps
              sleep 5
              curl -f http://localhost:80/health || echo "Health check failed"
            '
            
            echo "✅ Deployment completed"

workflows:
  version: 2
  build_test_deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - deploy:
          requires:
            - test
